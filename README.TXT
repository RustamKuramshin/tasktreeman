Task Tree Management System

За основу в разработке менеджера задач были приняты двоичное дерево поиска и очередь.
Приведенный код и реализованные механизмы подстраивались под условия задачи.

Описание проекта.

Структуры данных.
Дерево задач моделируется двоичным деревом поиска (класс TaskTree) для оптимизации поиска задачи и создания новой задачи
(поиск и вставка соответственно). Алгоритм вставки нового узла в двоичное дерево немного модифицирован для удовлетворения условиям задачи.
Последовательность выполнения задач моделируется с помощью очереди (класс TaskQueue).
Возможность создания леса деревьев с задачами моделируется с помощью mutable map (поле forestMap)

Основные механизмы.
1) Клиент делает запрос конечной точки "/run-new" , что вызывает создание нового дерева задач в лесе и добавления корня дерева в очередь на выполнение
2) Запрос конечной точки "/task-take" возврашает из очереди очередную задачу воркеру
3) Запрос конечной точки "/task-result" устанавливает задаче результат и инициирует создание новых задач и помещение их в очередь задач для
будущих запросов воркера

Динамика.
Дерево задач заполняется по мере поступления результатов решения задач от воркера.
Порядок выполнения задач и их создание реализованы очередью и измененным алгоритмом вставки в двоичное дерево.
Частые опросы конечных точек.
"/run-new". Частые опросы приводят к созданию новых иерархий задач на основе ункиальности начального значения
"/task-take". Частые опросы увеличивают пропускную способность сервиса и быстрее освобождают очередь
"/task-result". Частые опросы увеличивают число новых задач в очереди.



